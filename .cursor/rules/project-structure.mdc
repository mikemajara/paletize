---
description:
globs:
alwaysApply: false
---
# Paletize Chrome Extension Project Structure

## Overview
Paletize is a Chrome extension that extracts and displays color palettes from web pages. The project follows a standard Chrome extension structure with source files and a build process that outputs to a `dist` directory.

## Key Directories and Files

### Configuration Files
- [manifest.json](mdc:manifest.json) - Chrome extension manifest defining permissions and entry points
- [package.json](mdc:package.json) - NPM package configuration and scripts
- [rollup.config.js](mdc:rollup.config.js) - Build configuration for Rollup

### Source Files
- [content-script.js](mdc:content-script.js) - Injected into web pages to extract colors
- [popup.html](mdc:popup.html) - HTML structure for the extension popup
- [popup.js](mdc:popup.js) - JavaScript for the popup UI and functionality
- [popup.css](mdc:popup.css) - Styling for the popup interface

### Build and Output
- `dist/` - Output directory for built files (generated by the build process)
- `node_modules/` - NPM dependencies (not tracked in version control)

### Assets
- `images/` - Icons and graphical assets for the extension

## Extension Components

### Content Script
The [content-script.js](mdc:content-script.js) runs in the context of web pages and is responsible for:
- Scanning the DOM for color values
- Extracting colors from CSS rules and inline styles
- Processing and grouping similar colors
- Communicating with the popup via Chrome messaging

### Popup Interface
The popup consists of three main files:
- [popup.html](mdc:popup.html) - Defines the structure and action buttons
- [popup.js](mdc:popup.js) - Handles user interactions and color display
- [popup.css](mdc:popup.css) - Styles the popup UI elements

## Chrome Extension Integration
- Permissions are defined in [manifest.json](mdc:manifest.json)
- The extension uses Chrome's scripting and messaging APIs
- The popup is activated when the user clicks the extension icon in the toolbar

## Development Workflow
1. Edit source files in the project root
2. Run development or build commands from [package.json](mdc:package.json)
3. Test the extension from the `dist` directory
4. Package the `dist` directory for distribution
